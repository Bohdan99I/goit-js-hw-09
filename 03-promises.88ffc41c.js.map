{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAMA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAdMQ,SAASC,cAAc,SAE/BC,iBAAiB,UAgBtB,SAAkBC,GAChBA,EAAMC,iBACN,IAAgCC,EAAAF,EAAMG,cAAcC,SAA5CC,EAAwBH,EAAxBb,MAAOiB,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,OAEfC,EAAiBC,OAAOJ,EAAMK,OAC9BC,EAAgBF,OAAOH,EAAKI,OAC5BE,EAAkBH,OAAOF,EAAOG,OAEtC,GACEG,MAAML,IACNK,MAAMF,IACNE,MAAMD,IACNJ,GAAkB,GAClBG,GAAiB,GACjBC,GAAmB,EAGnB,YADAE,EAAA7B,GAAS8B,OAAOC,QAAQ,uCAI1B,IAAK,IAAIC,EAAI,EAAGC,EAAW,EAAGD,EAAIL,EAAiBK,GAAK,EAAGC,GAAY,EAAG,CAGxE/B,EAAc+B,EAFOV,EAAiBG,EAAgBM,GAGnDE,MAAK,SAAAC,G,IAAGhC,EAAQgC,EAARhC,SAAUC,EAAK+B,EAAL/B,MACjByB,EAAA7B,GAAS8B,OAAOM,QACd,uBAAwCC,OAAflC,EAAS,QAAYkC,OAANjC,EAAM,M,IAGjDkC,OAAM,SAAAH,G,IAAGhC,EAAQgC,EAARhC,SAAUC,EAAK+B,EAAL/B,MAClByB,EAAA7B,GAAS8B,OAAOC,QACd,sBAAqCM,OAAflC,EAAS,QAAYkC,OAANjC,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', onSubmit);\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction onSubmit(event) {\n  event.preventDefault();\n  const { delay, step, amount } = event.currentTarget.elements;\n\n  const validatedDelay = Number(delay.value);\n  const validatedStep = Number(step.value);\n  const validatedAmount = Number(amount.value);\n\n  if (\n    isNaN(validatedDelay) ||\n    isNaN(validatedStep) ||\n    isNaN(validatedAmount) ||\n    validatedDelay <= 0 ||\n    validatedStep <= 0 ||\n    validatedAmount <= 0\n  ) {\n    Notiflix.Notify.failure('Please enter valid positive numbers');\n    return;\n  }\n\n  for (let i = 0, position = 1; i < validatedAmount; i += 1, position += 1) {\n    const currentDelay = validatedDelay + validatedStep * i;\n\n    createPromise(position, currentDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","event","preventDefault","_elements","currentTarget","elements","delay1","step","amount","validatedDelay","Number","value","validatedStep","validatedAmount","isNaN","$parcel$interopDefault","Notify","failure","i","position1","then","param","success","concat","catch"],"version":3,"file":"03-promises.88ffc41c.js.map"}